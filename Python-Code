import pandas as pd
import shap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# Load the train.csv dataset
train_data = pd.read_csv('train.csv')

# Preprocess the data
train_data = train_data.dropna()  # Remove rows with missing values
train_data = train_data.drop(columns=['Loan_ID'])  # Remove Loan_ID column as it is not needed for prediction

# Encode categorical variables
categorical_cols = ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status']
label_encoders = {}
for col in categorical_cols:
    label_encoders[col] = LabelEncoder()
    train_data[col] = label_encoders[col].fit_transform(train_data[col])

# Handle 'Dependents' column
train_data['Dependents'] = train_data['Dependents'].replace('3+', 3)  # Replace '3+' with 3

# Split the data into features (X) and target (y)
X = train_data.drop(columns=['Loan_Status'])
y = train_data['Loan_Status']

# Train the model
model = RandomForestClassifier()
model.fit(X, y)

# Get user input for new data
new_data = {}

for col in X.columns:
    user_input = input(f"Enter the value for {col}: ")
    new_data[col] = [user_input]

# Add 'Loan_Status' column to new data
new_data['Loan_Status'] = [-1]

# Convert the new data into a DataFrame
new_data = pd.DataFrame(new_data)

# Handle 'Dependents' column in new data
new_data['Dependents'] = new_data['Dependents'].replace('3+', 3)  # Replace '3+' with 3

# Encode categorical variables in new data, except 'Loan_Status'
for col in categorical_cols[:-1]:
    new_data[col] = label_encoders[col].transform(new_data[col])

# Make prediction using the trained model
prediction = model.predict(new_data.drop(columns=['Loan_Status']))

# Decode prediction
prediction = label_encoders['Loan_Status'].inverse_transform(prediction)

# Output the prediction
print("Loan Approval Prediction:", prediction)

# Calculate SHAP values
explainer = shap.Explainer(model)
shap_values = explainer.shap_values(new_data.drop(columns=['Loan_Status']))

# Plot the SHAP summary plot
shap.summary_plot(shap_values, new_data.drop(columns=['Loan_Status']), plot_type='bar')
